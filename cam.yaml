esphome:
  name: esp32-s3-cam
  friendly_name: ESP32-S3-CAM
  on_boot:
    priority: -100
    then:
      - light.turn_on:
          id: my_led
          effect: "Rainbow Effect"
  platformio_options:
    board_build.arduino.memory_type: qio_opi

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
#   type: esp-idf
  variant: esp32s3
  flash_size: 8MB

psram:
  mode: octal
  speed: 80MHz
  
#esp32:
##  board: esp32-s3-devkitc-1
 # framework:
 #   type: esp-idf
  # platform_version: 4.4.0
 # variant: esp32s3

logger:

api:
  encryption:
    key: "H7E67FmYHhq5sU5WoiGKA7LI0H+TRQDwvZr20aw4qn0="

ota:
  - platform: esphome
    password: "232f36383b141d058815d0898bb24f4d"

    
captive_portal:

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  ap:
    ssid: "Cam Fallback Hotspot"
    password: "DxMg5CNILzsH"

mdns:
  disabled: false


status_led:
  pin: GPIO2

esp32_camera:
  name: OV2640 Camera
  id: espcam
  external_clock:
    pin: GPIO15
    frequency: 20MHz
  i2c_pins:
    sda: GPIO4
    scl: GPIO5
  data_pins: [GPIO11, GPIO9, GPIO8, GPIO10, GPIO12, GPIO18, GPIO17, GPIO16]
  vsync_pin: GPIO6
  href_pin: GPIO7
  pixel_clock_pin: GPIO13
  # reset_pin: GPIOXX
  # resolution: 2592x1944
  # resolution: 2560x1920
  # resolution: 1024x768
  resolution: 800x600
  jpeg_quality: 10
  vertical_flip: false
  horizontal_mirror: true
  aec_mode: auto
  agc_mode: auto
  wb_mode: auto
  aec2: false
  ae_level: 0
  aec_value: 300
  agc_gain_ceiling: 2X
  agc_value: 0
  max_framerate: 30fps
  idle_framerate: 1fps
  frame_buffer_count: 2
  contrast: 0
  brightness: 0
  saturation: 0
  special_effect: none

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot    

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "WS2812"
    id: my_led
    effects:
      - addressable_scan:
          name: "Scan Effect"
          move_interval: 100ms
          scan_width: 1
      - addressable_rainbow:
          name: "Rainbow Effect"
          speed: 10
          width: 50
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s 
     
button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"
  - platform: restart
    name: "Restart"
  - platform: safe_mode
    name: "Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"

globals:
# the debug parameter determines whether a config dump is done after making changes
# this is helpful when doing initial setup, but once everything is working, I turn it off
  - id: debug
    type: bool
    initial_value: 'false'
# value to track if camera parameters have been changed
#   used to trigger the loop() code inserted in 'esphome' section above
  - id: espcam_update
    type: bool
    initial_value: 'false'
    
switch:
# on/off switch for Vertical Flip (my default = off, therefore: RESTORE_DEFAULT_OFF)
  - platform: template
    name: "Vertical Flip"
    id: v_flip
    icon: mdi:swap-vertical
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      lambda: |-
        id(espcam).set_vertical_flip(true);
        id(espcam_update) = true;
    turn_off_action:
      lambda: |-
        id(espcam).set_vertical_flip(false);
        id(espcam_update) = true;
# on/off switch for Horizontal Mirror (my default = on, therefore: RESTORE_DEFAULT_ON)
  - platform: template
    name: "Horizontal Mirror"
    id: h_mirror
    icon: mdi:reflect-horizontal
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    turn_on_action:
      lambda: |-
        id(espcam).set_horizontal_mirror(true);
        id(espcam_update) = true;
    turn_off_action:
      lambda: |-
        id(espcam).set_horizontal_mirror(false);
        id(espcam_update) = true;
# on/off switch for Auto Exposure 2 (my default = off, therefore: RESTORE_DEFAULT_OFF)
  - platform: template
    name: "Auto Exposure 2"
    id: aec_2
    icon: mdi:auto-fix
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      lambda: |-
        id(espcam).set_aec2(true);
        id(espcam_update) = true;
    turn_off_action:
      lambda: |-
        id(espcam).set_aec2(false);
        id(espcam_update) = true;

# configure selects (aka dropdowns or option lists) for these parameters to make them available in HA
select:
# while you can change the frame_size (aka resolution) value while the camera is running, it will have no effect
#  - see the note in the esp32_camera section above about the first 5 image parameters
# I left this here in case it ever starts working
#  - platform: template
#    name: "Resolution"
#    id: res
#    options:
#      - "160x120"
#      - "176x144"
#      - "240x176"
#      - "320x240"
#      - "400x296"
#      - "640x480"
#      - "800x600"
#      - "1024x768"
#      - "1280x1024"
#      - "1600x1200"
#    initial_option: "800x600"
#    optimistic: True
#    restore_value: True
#    on_value:
#      - lambda: |-
#          id(espcam).set_frame_size((esphome::esp32_camera::ESP32CameraFrameSize)id(res).active_index().value());
#          // some function to change the frame_size
#          id(espcam_update) = true;
# Option list for Special Effects
  - platform: template
    name: "Special Effects"
    icon: mdi:filter
    id: effect
    options:
      - "None"
      - "Negative"
      - "Grayscale"
      - "Red Tint"
      - "Green Tint"
      - "Blue Tint"
      - "Sepia"
    initial_option: "None"
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_special_effect((esphome::esp32_camera::ESP32SpecialEffect)id(effect).active_index().value());
        id(espcam_update) = true;
# Option List for White Balance
  - platform: template
    name: "White Balance Mode"
    id: wb
    icon: mdi:white-balance-auto
    options:
      - "Auto"
      - "Sunny"
      - "Cloudy"
      - "Office"
      - "Home"
    initial_option: "Auto"
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_wb_mode((esphome::esp32_camera::ESP32WhiteBalanceMode)id(wb).active_index().value());
        id(espcam_update) = true;
# Option list for AEC mode
  - platform: template
    name: "Auto Exposure Mode"
    id: aec
    icon: mdi:auto-fix
    options:
      - "Manual"
      - "Auto"
    initial_option: "Auto"
    optimistic: True
    on_value:
      lambda: |-
        // if you're looking closely, you may notice that AEC uses the Enum defined for Gain_control.
        // this is how it is defined in the component source code since they both only have "auto" & "manual"
        id(espcam).set_aec_mode((esphome::esp32_camera::ESP32GainControlMode)id(aec).active_index().value());
        id(espcam_update) = true;
# Option list for Gain Control Mode
  - platform: template
    name: "Gain Control Mode"
    id: gc
    icon: mdi:auto-fix
    options:
      - "Manual"
      - "Auto"
    initial_option: "Auto"
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_agc_mode((esphome::esp32_camera::ESP32GainControlMode)id(gc).active_index().value());
        id(espcam_update) = true;
# Option list for Gain Ceiling (apparently this is somewhat equivilant to ISO settings)
  - platform: template
    name: "Gain Ceiling"
    id: g_ceiling
    options:
      - "2x"
      - "4x"
      - "8x"
      - "16x"
      - "32x"
      - "64x"
      - "128x"
    initial_option: "2x"
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_agc_gain_ceiling((esphome::esp32_camera::ESP32AgcGainCeiling)id(g_ceiling).active_index().value());
        id(espcam_update) = true;

# configure number sliders for these parameters to make them available in HA
number:
# While the sliders for Contrast, Brightness, and Saturation all work and change the parameters of the sensor
# they do not seem to make any difference to the image output
  - platform: template
    name: "Contrast"
    id: contrast
    icon: mdi:contrast-box
    min_value: -2
    max_value: 2
    step: 1
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_contrast(id(contrast).state);
        id(espcam_update) = true;
# Number Slider for Brightness
  - platform: template
    name: "Brightness"
    id: brightness
    icon: mdi:brightness-6
    min_value: -2
    max_value: 2
    step: 1
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_brightness(id(brightness).state);
        id(espcam_update) = true;
# Number Slider for Saturation
  - platform: template
    name: "Saturation"
    id: saturation
    icon: mdi:palette-outline
    min_value: -2
    max_value: 2
    step: 1
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_saturation(id(saturation).state);
        id(espcam_update) = true;
# Number Slider for Gain Value
  - platform: template
    name: "Gain Value"
    id: g_value
    min_value: 0
    max_value: 30
    step: 1
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_agc_value(id(g_value).state);
        id(espcam_update) = true;
# Number slider for AE Level
  - platform: template
    name: "AE Level"
    id: ae_level
    min_value: -2
    max_value: 2
    step: 1
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_ae_level(id(ae_level).state);
        id(espcam_update) = true;
# Number Slider for AE Value (step set to 10)
# I tried using steps of 1 (too fine to control) and 100 (to coarse for the values) and settled on 10
  - platform: template
    name: "AE Value"
    id: ae_value
    min_value: 0
    max_value: 1200
    step: 10
    initial_value: 0
    mode: SLIDER
    optimistic: True
    on_value:
      lambda: |-
        id(espcam).set_aec_value(id(ae_value).state);
        id(espcam_update) = true;      
